scalar DateTime
scalar Date

type Query {
    # Searches over all Lookup records by a grouping type criteria
    findAllLookupsByType(type: String!): [Lookup]!

    # Customer
    findAllCustomers: [CustomerDTO]!
    findCustomerByCode(code: String!): CustomerDTO
    # Searches over all Customers
    findAllCustomers: [Customer]!
    # Finds a Customer by its code
    findCustomerByCode(code: String!): Customer
}

type Mutation {
    insertLookup(lookupRequest: LookupRequest!): Lookup!
    updateLookup(lookupRequest: LookupRequest!): Lookup!
    deleteLookup(lookupRequest: LookupRequest!): Lookup!
    insertLookup(lookup: LookupInput!): Lookup!
    updateLookup(lookup: LookupInput!): Lookup!
    deleteLookup(lookup: LookupInput!): Lookup!
}

input LookupIdInput {
    type: String!
    optionValue: String!
}

input LookupInput {
    type: String!
    optionValue: String!
    descriptionKey: String!
    orderNumber: Int!
    active: Boolean!
}

type Lookup {
    type: String!
    optionValue: String!
    descriptionKey: String!
    orderNumber: Int!
    active: Boolean!
}

type CustomerAddress {
    contactName: String!
    addressType: String!
    state: String!
    postalCode: String!
    countryCode: String!
    city: String!
    district: String!
    addressLine1: String!
    addressLine2: String!
    active: String!
}

type Customer {
    externalId: String!
    name: String!
    code: String!
    departmentCode: String!
    departmentName: String!
    phoneNumber: String!
    active: String!
    addresses: [CustomerAddressDTO]
    addresses: [CustomerAddress]
}
}
