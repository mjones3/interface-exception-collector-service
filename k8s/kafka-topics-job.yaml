apiVersion: batch/v1
kind: Job
metadata:
  name: kafka-topics-job
  labels:
    app: kafka-topics-job
spec:
  ttlSecondsAfterFinished: 30
  activeDeadlineSeconds: 300
  backoffLimit: 2
  template:
    metadata:
      labels:
        app: kafka-topics-job
      annotations:
        sidecar.istio.io/inject: "false"
        proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: wait-for-kafka
        image: confluentinc/cp-kafka:7.4.0
        command:
          - sh
          - -c
          - |
            echo "Waiting for Kafka to be ready..."
            max_attempts=30
            attempt=0
            while [ $attempt -lt $max_attempts ]; do
              if kafka-topics --bootstrap-server kafka:9092 --list >/dev/null 2>&1; then
                echo "‚úÖ Kafka is ready!"
                exit 0
              fi
              attempt=$((attempt + 1))
              echo "‚è≥ Attempt $attempt/$max_attempts - Kafka not ready yet, waiting..."
              sleep 5
            done
            echo "‚ùå Kafka failed to become ready after $max_attempts attempts"
            exit 1
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      containers:
      - name: create-topics
        image: confluentinc/cp-kafka:7.4.0
        command:
          - sh
          - -c
          - |
            set -e
            echo "Creating Kafka topics..."
            
            # Function to create topic with error handling
            create_topic() {
              local topic=$1
              local partitions=$2
              local replication=$3
              echo "Creating topic: $topic"
              if kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic "$topic" --partitions "$partitions" --replication-factor "$replication"; then
                echo "‚úì Topic $topic created or already exists"
              else
                echo "‚ö† Warning: Failed to create topic $topic, but continuing..."
              fi
            }
            
            # Create inbound topics (from interface services)
            create_topic "OrderRejected" 3 1
            create_topic "OrderCancelled" 3 1
            create_topic "CollectionRejected" 3 1
            create_topic "DistributionFailed" 3 1
            create_topic "ValidationError" 3 1
            
            # Create Partner Order Service topics
            create_topic "OrderRecieved" 3 1
            create_topic "InvalidOrderEvent" 3 1

            # Create outbound topics (from exception collector)
            create_topic "ExceptionCaptured" 3 1
            create_topic "ExceptionResolved" 3 1
            create_topic "ExceptionRetryCompleted" 3 1
            create_topic "CriticalExceptionAlert" 3 1

            # Create dead letter topics
            create_topic "OrderRejected.DLT" 1 1
            create_topic "OrderCancelled.DLT" 1 1
            create_topic "CollectionRejected.DLT" 1 1
            create_topic "DistributionFailed.DLT" 1 1
            create_topic "ValidationError.DLT" 1 1
            create_topic "OrderRecieved.DLT" 1 1
            create_topic "InvalidOrderEvent.DLT" 1 1

            echo "‚úÖ All Kafka topics processed successfully!"
            
            # List all topics to verify
            echo "üìã Current topics:"
            kafka-topics --bootstrap-server kafka:9092 --list
            
            echo "üéâ Kafka topics job completed!"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"