package com.arcone.biopro.exception.collector.api.graphql.config;

import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.Timer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.actuator.health.Health;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;

import java.time.Duration;
import java.util.concurrent.TimeUnit;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

/**
 * Integration tests for GraphQL monitoring and observability components.
 * Tests metrics collection, health checks, alerting, and logging functionality.
 */
@Disabled("Redis is disabled - monitoring tests with Redis cannot run")
@SpringBootTest
@ActiveProfiles("test")
class GraphQLMonitoringIntegrationTest {

    @Autowired
    private MeterRegistry meterRegistry;

    @Autowired
    private GraphQLMetrics graphQLMetrics;

    @Autowired
    private GraphQLHealthIndicator graphQLHealthIndicator;

    @Autowired
    private GraphQLAlertingConfig graphQLAlertingConfig;

    @MockBean
    private JdbcTemplate jdbcTemplate;

    @MockBean
    private RedisTemplate<String, Object> redisTemplate;

    @BeforeEach
    void setUp() {
        // Mock database responses for health checks
        when(jdbcTemplate.queryForObject("SELECT 1", Integer.class)).thenReturn(1);
        when(jdbcTemplate.queryForObject(anyString(), any(Class.class))).thenReturn(0L);

        // Mock Redis responses for health checks
        when(redisTemplate.getConnectionFactory()).thenReturn(null);
    }

    @Test
    void testGraphQLMetricsRegistration() {
        // Verify that GraphQL metrics are properly registered
        assertThat(meterRegistry.find("graphql.query.count").counter()).isNotNull();
        assertThat(meterRegistry.find("graphql.query.duration").timer()).isNotNull();
        assertThat(meterRegistry.find("graphql.error.count").counter()).isNotNull();
        assertThat(meterRegistry.find("graphql.mutation.count").counter()).isNotNull();
        assertThat(meterRegistry.find("graphql.subscription.count").counter()).isNotNull();
    }

    @Test
    void testMetricsCollection() {
        // Test business metric recording
        graphQLMetrics.recordBusinessMetric("test-operation", "testQuery",
                Duration.ofMillis(100), true);

        Timer businessTimer = meterRegistry.find("graphql.business.test-operation")
                .tag("operation", "testQuery")
                .tag("status", "success")
                .timer();

        assertThat(businessTimer).isNotNull();
        assertThat(businessTimer.count()).isEqualTo(1);
    }

    @Test
    void testCacheMetricsRecording() {
        // Test cache hit recording
        graphQLMetrics.recordCacheMetric("exception-cache", true);
        graphQLMetrics.recordCacheMetric("exception-cache", false);

        Counter hitCounter = meterRegistry.find("graphql.cache.access")
                .tag("cache", "exception-cache")
                .tag("result", "hit")
                .counter();

        Counter missCounter = meterRegistry.find("graphql.cache.access")
                .tag("cache", "exception-cache")
                .tag("result", "miss")
                .counter();

        assertThat(hitCounter).isNotNull();
        assertThat(missCounter).isNotNull();
        assertThat(hitCounter.count()).isEqualTo(1);
        assertThat(missCounter.count()).isEqualTo(1);
    }

    @Test
    void testDataLoaderMetricsRecording() {
        // Test DataLoader batch metrics
        graphQLMetrics.recordDataLoaderBatch("exception-loader", 5, Duration.ofMillis(50));

        Timer dataLoaderTimer = meterRegistry.find("graphql.dataloader.batch")
                .tag("loader", "exception-loader")
                .tag("batchSize", "5")
                .timer();

        assertThat(dataLoaderTimer).isNotNull();
        assertThat(dataLoaderTimer.count()).isEqualTo(1);
        assertThat(dataLoaderTimer.totalTime(TimeUnit.MILLISECONDS)).isGreaterThan(0);
    }

    @Test
    void testHealthIndicatorWithHealthyServices() {
        // Mock healthy database and cache responses
        when(jdbcTemplate.queryForObject("SELECT 1", Integer.class)).thenReturn(1);
        when(jdbcTemplate.queryForObject(
                "SELECT COUNT(*) FROM interface_exceptions WHERE created_at > NOW() - INTERVAL '1 hour'",
                Long.class)).thenReturn(10L);

        Health health = graphQLHealthIndicator.health();

        assertThat(health.getStatus().getCode()).isEqualTo("UP");
        assertThat(health.getDetails()).containsKey("database");
        assertThat(health.getDetails()).containsKey("cache");
        assertThat(health.getDetails()).containsKey("graphql_schema");
        assertThat(health.getDetails()).containsKey("api_metrics");
    }

    @Test
    void testHealthIndicatorWithUnhealthyDatabase() {
        // Mock database failure
        when(jdbcTemplate.queryForObject("SELECT 1", Integer.class))
                .thenThrow(new RuntimeException("Database connection failed"));

        Health health = graphQLHealthIndicator.health();

        assertThat(health.getStatus().getCode()).isEqualTo("DOWN");
        assertThat(health.getDetails()).containsKey("database");
    }

    @Test
    void testAlertingConfigurationHealth() {
        Health alertHealth = graphQLAlertingConfig.health();

        assertThat(alertHealth).isNotNull();
        assertThat(alertHealth.getDetails()).containsKey("last_check");
        assertThat(alertHealth.getDetails()).containsKey("total_alerts_triggered");
        assertThat(alertHealth.getDetails()).containsKey("active_alerts");
        assertThat(alertHealth.getDetails()).containsKey("alert_thresholds");
    }

    @Test
    void testAlertThresholds() {
        Health alertHealth = graphQLAlertingConfig.health();

        @SuppressWarnings("unchecked")
        var thresholds = (java.util.Map<String, Object>) alertHealth.getDetails().get("alert_thresholds");

        assertThat(thresholds).containsKey("query_response_time_ms");
        assertThat(thresholds).containsKey("mutation_response_time_ms");
        assertThat(thresholds).containsKey("error_rate_percent");
        assertThat(thresholds).containsKey("cache_miss_rate_percent");
        assertThat(thresholds).containsKey("throughput_per_minute");
    }

    @Test
    void testPrometheusMetricsEndpoint() {
        // Verify that Prometheus metrics are available
        assertThat(meterRegistry.find("graphql.query.count").counter()).isNotNull();

        // Record some metrics
        Counter queryCounter = meterRegistry.counter("graphql.query.count",
                "operation", "testQuery", "status", "success");
        queryCounter.increment();

        assertThat(queryCounter.count()).isEqualTo(1);
    }

    @Test
    void testMeterRegistryCustomization() {
        // Verify common tags are applied
        Counter testCounter = meterRegistry.counter("test.metric");

        // The counter should have common tags applied by the customizer
        assertThat(testCounter.getId().getTags()).isNotEmpty();
    }

    @Test
    void testMetricsFiltering() {
        // Test that certain metrics are filtered out
        // This would depend on the specific filter configuration

        // Verify that GraphQL metrics are not filtered
        Timer queryTimer = meterRegistry.timer("graphql.query.duration");
        assertThat(queryTimer).isNotNull();

        // Verify that business metrics are not filtered
        Timer businessTimer = meterRegistry.timer("graphql.business.test");
        assertThat(businessTimer).isNotNull();
    }

    @Test
    void testHealthCheckComponents() {
        // Test that all health check components are properly configured
        Health health = graphQLHealthIndicator.health();

        assertThat(health.getDetails()).containsKey("database");
        assertThat(health.getDetails()).containsKey("cache");
        assertThat(health.getDetails()).containsKey("graphql_schema");

        // Verify API metrics are included
        assertThat(health.getDetails()).containsKey("api_metrics");

        @SuppressWarnings("unchecked")
        var apiMetrics = (java.util.Map<String, Object>) health.getDetails().get("api_metrics");
        assertThat(apiMetrics).containsKey("last_health_check");
    }

    @Test
    void testCorrelationIdGeneration() {
        // This test would verify that correlation IDs are properly generated
        // and used in logging context. Since we can't easily test MDC in unit tests,
        // we'll verify the GraphQLMetrics class has the correlation ID generation
        // method

        assertThat(graphQLMetrics).isNotNull();
        // The correlation ID generation is tested implicitly through the
        // instrumentation
    }
}