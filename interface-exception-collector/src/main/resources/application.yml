spring:
  application:
    name: interface-exception-collector-service
  
  # Allow bean definition overriding and circular references to prevent conflicts
  main:
    allow-bean-definition-overriding: true
    allow-circular-references: true
  
  # Exclude Dynatrace and Redis auto-configuration completely
  autoconfigure:
    exclude:
      - io.micrometer.dynatrace.DynatraceConfig
      - org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration
      - org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration
      - org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration
  
  # Lifecycle management for proper shutdown
  lifecycle:
    timeout-per-shutdown-phase: 45s
  
  datasource:
    url: jdbc:postgresql://localhost:5432/exception_collector_db?sslmode=${DB_SSL_MODE:disable}&sslcert=${DB_SSL_CERT:}&sslkey=${DB_SSL_KEY:}&sslrootcert=${DB_SSL_ROOT_CERT:}&prepareThreshold=${DB_PREPARE_THRESHOLD:5}&preparedStatementCacheQueries=${DB_PREPARED_STATEMENT_CACHE_QUERIES:256}&preparedStatementCacheSizeMiB=${DB_PREPARED_STATEMENT_CACHE_SIZE:5}&defaultRowFetchSize=${DB_DEFAULT_ROW_FETCH_SIZE:1000}
    username: exception_user
    password: exception_pass
    driver-class-name: org.postgresql.Driver
    hikari:
      # Connection pool sizing optimized for GraphQL workloads
      maximum-pool-size: ${DB_MAX_POOL_SIZE:50}
      minimum-idle: ${DB_MIN_IDLE:10}
      
      # Connection timing optimized for performance
      connection-timeout: ${DB_CONNECTION_TIMEOUT:20000}
      idle-timeout: ${DB_IDLE_TIMEOUT:300000}
      max-lifetime: ${DB_MAX_LIFETIME:1200000}
      
      # Performance and monitoring settings
      leak-detection-threshold: ${DB_LEAK_DETECTION_THRESHOLD:60000}
      validation-timeout: ${DB_VALIDATION_TIMEOUT:5000}
      initialization-fail-timeout: ${DB_INIT_FAIL_TIMEOUT:1}
      
      # Connection pool behavior
      isolate-internal-queries: true
      allow-pool-suspension: false
      read-only: false
      register-mbeans: true
      pool-name: "GraphQLExceptionCollectorCP"
      auto-commit: false
      
      # Connection properties for performance
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 256
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          time_zone: UTC
          # Performance optimizations for GraphQL queries
          batch_size: ${HIBERNATE_BATCH_SIZE:100}
          fetch_size: ${HIBERNATE_FETCH_SIZE:1000}
          batch_versioned_data: true
        # Query optimization settings
        query:
          plan_cache_max_size: ${HIBERNATE_QUERY_PLAN_CACHE_SIZE:1000}
          plan_parameter_metadata_max_size: ${HIBERNATE_QUERY_PLAN_PARAMETER_CACHE_SIZE:128}
        # Cache settings - Disabled JCache to fix startup issue
        cache:
          use_second_level_cache: false
          use_query_cache: false
          # region:
          #   factory_class: org.hibernate.cache.jcache.JCacheRegionFactory
        # Connection and statement settings
        connection:
          provider_disables_autocommit: true
        statement:
          batch_size: ${HIBERNATE_STATEMENT_BATCH_SIZE:100}
        order_inserts: true
        order_updates: true
        # Statistics for monitoring
        generate_statistics: ${HIBERNATE_GENERATE_STATISTICS:true}
        session:
          events:
            log:
              LOG_QUERIES_SLOWER_THAN_MS: ${HIBERNATE_LOG_SLOW_QUERIES_MS:1000}
  
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    schemas: public
    table: flyway_schema_history
    validate-on-migrate: true

  # Redis Cache Configuration - DISABLED to prevent Lettuce memory leaks
  # data:
  #   redis:
  #     host: localhost
  #     port: 6379
  #     timeout: ${REDIS_TIMEOUT:3000ms}
  #     connect-timeout: ${REDIS_CONNECT_TIMEOUT:2000ms}
  #     lettuce:
  #       pool:
  #         # Connection pool sizing optimized for GraphQL caching
  #         max-active: ${REDIS_MAX_ACTIVE:20}
  #         max-idle: ${REDIS_MAX_IDLE:10}
  #         min-idle: ${REDIS_MIN_IDLE:5}
  #         max-wait: ${REDIS_MAX_WAIT:5000ms}
  #         time-between-eviction-runs: ${REDIS_EVICTION_RUNS:30000ms}
  #       # Enhanced shutdown configuration to prevent memory leaks
  #       shutdown-timeout: ${REDIS_SHUTDOWN_TIMEOUT:5000ms}
  #       shutdown-quiet-period: ${REDIS_SHUTDOWN_QUIET_PERIOD:1000ms}
  #       cluster:
  #         refresh:
  #           adaptive: true
  #           period: ${REDIS_CLUSTER_REFRESH_PERIOD:30s}
  #       # Additional Netty configuration for proper thread cleanup
  #       client-resources:
  #         # Use custom client resources bean for proper shutdown
  #         use-custom: true
  
  cache:
    type: simple  # Disabled Redis, using simple in-memory cache
    # redis:
    #   time-to-live: 300000  # 5 minutes default TTL
    #   cache-null-values: false
    #   use-key-prefix: true
    #   key-prefix: "exception-collector:"



  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: interface-exception-collector
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.arcone.biopro.exception.collector.domain.event"
        spring.json.type.mapping: >
          OrderRejectedEvent:com.arcone.biopro.exception.collector.domain.event.inbound.OrderRejectedEvent,
          OrderCancelledEvent:com.arcone.biopro.exception.collector.domain.event.inbound.OrderCancelledEvent,
          CollectionRejectedEvent:com.arcone.biopro.exception.collector.domain.event.inbound.CollectionRejectedEvent,
          DistributionFailedEvent:com.arcone.biopro.exception.collector.domain.event.inbound.DistributionFailedEvent,
          ValidationErrorEvent:com.arcone.biopro.exception.collector.domain.event.inbound.ValidationErrorEvent
        # TLS configuration
        security.protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
        ssl.truststore.location: ${KAFKA_SSL_TRUSTSTORE_LOCATION:}
        ssl.truststore.password: ${KAFKA_SSL_TRUSTSTORE_PASSWORD:}
        ssl.keystore.location: ${KAFKA_SSL_KEYSTORE_LOCATION:}
        ssl.keystore.password: ${KAFKA_SSL_KEYSTORE_PASSWORD:}
        ssl.key.password: ${KAFKA_SSL_KEY_PASSWORD:}
      enable-auto-commit: false
      max-poll-records: 10
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      properties:
        # TLS configuration
        security.protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
        ssl.truststore.location: ${KAFKA_SSL_TRUSTSTORE_LOCATION:}
        ssl.truststore.password: ${KAFKA_SSL_TRUSTSTORE_PASSWORD:}
        ssl.keystore.location: ${KAFKA_SSL_KEYSTORE_LOCATION:}
        ssl.keystore.password: ${KAFKA_SSL_KEYSTORE_PASSWORD:}
        ssl.key.password: ${KAFKA_SSL_KEY_PASSWORD:}
    listener:
      ack-mode: manual_immediate
      concurrency: 3

  # GraphQL Configuration
  graphql:
    path: /graphql
    cors:
      allowed-origins: "*"
      allowed-methods: "*"
    websocket:
      path: /subscriptions
    schema:
      locations: classpath:graphql/**/*.graphqls
      printer:
        enabled: true
    query:
      max-query-depth: 10
      max-query-complexity: 1000
    graphiql:
      enabled: ${GRAPHIQL_ENABLED:true}
      path: /graphiql

# Custom GraphQL Feature Configuration
graphql:
  features:
    enabled: ${GRAPHQL_ENABLED:true}
    query-enabled: ${GRAPHQL_QUERY_ENABLED:true}
    mutation-enabled: ${GRAPHQL_MUTATION_ENABLED:true}
    subscription-enabled: ${GRAPHQL_SUBSCRIPTION_ENABLED:true}
    graphiql-enabled: ${GRAPHQL_GRAPHIQL_ENABLED:true}
    introspection-enabled: ${GRAPHQL_INTROSPECTION_ENABLED:true}
    data-loader-enabled: ${GRAPHQL_DATALOADER_ENABLED:true}
    complexity-analysis-enabled: ${GRAPHQL_COMPLEXITY_ANALYSIS_ENABLED:true}
    depth-analysis-enabled: ${GRAPHQL_DEPTH_ANALYSIS_ENABLED:true}
    metrics-enabled: ${GRAPHQL_METRICS_ENABLED:true}
    audit-logging-enabled: ${GRAPHQL_AUDIT_LOGGING_ENABLED:true}
    query-cache-enabled: ${GRAPHQL_QUERY_CACHE_ENABLED:true}
    rate-limiting-enabled: ${GRAPHQL_RATE_LIMITING_ENABLED:true}
    query-allowlist-enabled: ${GRAPHQL_QUERY_ALLOWLIST_ENABLED:false}
    websocket-heartbeat-enabled: ${GRAPHQL_WEBSOCKET_HEARTBEAT_ENABLED:true}
    health-checks-enabled: ${GRAPHQL_HEALTH_CHECKS_ENABLED:true}
    alerting-enabled: ${GRAPHQL_ALERTING_ENABLED:true}
    performance-optimizations-enabled: ${GRAPHQL_PERFORMANCE_OPTIMIZATIONS_ENABLED:true}
    cors-enabled: ${GRAPHQL_CORS_ENABLED:true}
    development-tools-enabled: ${GRAPHQL_DEVELOPMENT_TOOLS_ENABLED:true}
  
  max-query-complexity: ${GRAPHQL_MAX_COMPLEXITY:1000}
  max-query-depth: ${GRAPHQL_MAX_DEPTH:10}
  query-timeout-seconds: ${GRAPHQL_QUERY_TIMEOUT:30}
  websocket:
    heartbeat:
      interval: ${GRAPHQL_WS_HEARTBEAT_INTERVAL:30}
    max-connections: ${GRAPHQL_WS_MAX_CONNECTIONS:1000}
    connection-timeout: ${GRAPHQL_WS_CONNECTION_TIMEOUT:30}
    subscription:
      buffer-size: ${GRAPHQL_WS_BUFFER_SIZE:1000}
      latency-threshold-ms: ${GRAPHQL_WS_LATENCY_THRESHOLD:2000}
  
  # Rate Limiting Configuration
  rate-limiting:
    enabled: ${GRAPHQL_RATE_LIMITING_ENABLED:true}
    roles:
      ADMIN:
        requests-per-minute: ${GRAPHQL_ADMIN_RPM:300}
        requests-per-hour: ${GRAPHQL_ADMIN_RPH:10000}
        max-query-complexity: ${GRAPHQL_ADMIN_COMPLEXITY:5000}
      OPERATIONS:
        requests-per-minute: ${GRAPHQL_OPS_RPM:120}
        requests-per-hour: ${GRAPHQL_OPS_RPH:3600}
        max-query-complexity: ${GRAPHQL_OPS_COMPLEXITY:2000}
      VIEWER:
        requests-per-minute: ${GRAPHQL_VIEWER_RPM:60}
        requests-per-hour: ${GRAPHQL_VIEWER_RPH:1800}
        max-query-complexity: ${GRAPHQL_VIEWER_COMPLEXITY:1000}
  
  # Security Configuration
  security:
    query-allowlist:
      enabled: ${GRAPHQL_QUERY_ALLOWLIST_ENABLED:false}
      allowed-query-hashes:
        - "a1b2c3d4e5f6"  # exceptions query
        - "f6e5d4c3b2a1"  # exception by ID query
        - "1a2b3c4d5e6f"  # exception summary query
        - "6f5e4d3c2b1a"  # retry exception mutation
        - "b1c2d3e4f5a6"  # acknowledge exception mutation
    audit-logging:
      enabled: ${GRAPHQL_AUDIT_LOGGING_ENABLED:true}
      log-queries: ${GRAPHQL_AUDIT_LOG_QUERIES:false}
      log-variables: ${GRAPHQL_AUDIT_LOG_VARIABLES:false}
  
  # DataLoader Performance Configuration
  dataloader:
    exception:
      batch-size: ${GRAPHQL_DATALOADER_EXCEPTION_BATCH_SIZE:200}
    payload:
      batch-size: ${GRAPHQL_DATALOADER_PAYLOAD_BATCH_SIZE:25}
    retry-history:
      batch-size: ${GRAPHQL_DATALOADER_RETRY_HISTORY_BATCH_SIZE:150}
    status-change:
      batch-size: ${GRAPHQL_DATALOADER_STATUS_CHANGE_BATCH_SIZE:150}
    cache-ttl-seconds: ${GRAPHQL_DATALOADER_CACHE_TTL:300}
    batch-delay-ms: ${GRAPHQL_DATALOADER_BATCH_DELAY:10}

  # Query Result Caching Configuration
  query-cache:
    enabled: ${GRAPHQL_QUERY_CACHE_ENABLED:true}
    default-ttl-seconds: ${GRAPHQL_QUERY_CACHE_TTL:300}
    max-size: ${GRAPHQL_QUERY_CACHE_MAX_SIZE:10000}
    cache-keys:
      exception-list: "exceptions:list:{filters_hash}:{pagination_hash}"
      exception-summary: "exceptions:summary:{time_range}:{filters_hash}"
      exception-detail: "exceptions:detail:{transaction_id}"
      retry-history: "retry:history:{transaction_id}"
      status-history: "status:history:{transaction_id}"
    ttl-by-type:
      exception-list: ${GRAPHQL_CACHE_EXCEPTION_LIST_TTL:180}
      exception-summary: ${GRAPHQL_CACHE_EXCEPTION_SUMMARY_TTL:300}
      exception-detail: ${GRAPHQL_CACHE_EXCEPTION_DETAIL_TTL:600}
      retry-history: ${GRAPHQL_CACHE_RETRY_HISTORY_TTL:900}
      status-history: ${GRAPHQL_CACHE_STATUS_HISTORY_TTL:900}

  # Performance Optimization Configuration
  performance:
    connection-pool:
      database:
        max-pool-size: ${GRAPHQL_DB_MAX_POOL_SIZE:50}
        min-idle: ${GRAPHQL_DB_MIN_IDLE:10}
        connection-timeout-ms: ${GRAPHQL_DB_CONNECTION_TIMEOUT:20000}
        idle-timeout-ms: ${GRAPHQL_DB_IDLE_TIMEOUT:300000}
        max-lifetime-ms: ${GRAPHQL_DB_MAX_LIFETIME:1200000}
        leak-detection-threshold-ms: ${GRAPHQL_DB_LEAK_DETECTION:60000}
      redis:
        max-active: ${GRAPHQL_REDIS_MAX_ACTIVE:20}
        max-idle: ${GRAPHQL_REDIS_MAX_IDLE:10}
        min-idle: ${GRAPHQL_REDIS_MIN_IDLE:5}
        max-wait-ms: ${GRAPHQL_REDIS_MAX_WAIT:5000}
    query-optimization:
      enable-query-plan-cache: ${GRAPHQL_ENABLE_QUERY_PLAN_CACHE:true}
      query-plan-cache-size: ${GRAPHQL_QUERY_PLAN_CACHE_SIZE:1000}
      enable-prepared-statements: ${GRAPHQL_ENABLE_PREPARED_STATEMENTS:true}
      fetch-size: ${GRAPHQL_FETCH_SIZE:1000}
      batch-fetch-size: ${GRAPHQL_BATCH_FETCH_SIZE:100}

  # Monitoring and Observability Configuration
  monitoring:
    metrics:
      enabled: ${GRAPHQL_METRICS_ENABLED:true}
      detailed-field-metrics: ${GRAPHQL_DETAILED_FIELD_METRICS:false}
      cache-metrics: ${GRAPHQL_CACHE_METRICS:true}
      dataloader-metrics: ${GRAPHQL_DATALOADER_METRICS:true}
    alerting:
      enabled: ${GRAPHQL_ALERTING_ENABLED:true}
      check-interval-seconds: ${GRAPHQL_ALERT_CHECK_INTERVAL:30}
      cooldown-minutes: ${GRAPHQL_ALERT_COOLDOWN:5}
      thresholds:
        query-response-time-ms: ${GRAPHQL_ALERT_QUERY_RESPONSE_TIME:500}
        mutation-response-time-ms: ${GRAPHQL_ALERT_MUTATION_RESPONSE_TIME:3000}
        error-rate-percent: ${GRAPHQL_ALERT_ERROR_RATE:5.0}
        cache-miss-rate-percent: ${GRAPHQL_ALERT_CACHE_MISS_RATE:20.0}
        throughput-per-minute: ${GRAPHQL_ALERT_THROUGHPUT:1000}
    health-checks:
      enabled: ${GRAPHQL_HEALTH_CHECKS_ENABLED:true}
      database-timeout-ms: ${GRAPHQL_HEALTH_DB_TIMEOUT:1000}
      cache-timeout-ms: ${GRAPHQL_HEALTH_CACHE_TIMEOUT:100}
    logging:
      structured: ${GRAPHQL_STRUCTURED_LOGGING:true}
      correlation-id: ${GRAPHQL_CORRELATION_ID:true}
      performance-warnings: ${GRAPHQL_PERFORMANCE_WARNINGS:true}
      slow-query-threshold-ms: ${GRAPHQL_SLOW_QUERY_THRESHOLD:1000}
      slow-field-threshold-ms: ${GRAPHQL_SLOW_FIELD_THRESHOLD:100}

server:
  port: 8080
  # Graceful shutdown configuration to prevent memory leaks
  shutdown: graceful
  ssl:
    enabled: ${app.security.tls.enabled:false}
    key-store: ${app.security.tls.keystore.path:}
    key-store-password: ${app.security.tls.keystore.password:}
    key-store-type: JKS
    trust-store: ${app.security.tls.truststore.path:}
    trust-store-password: ${app.security.tls.truststore.password:}
    trust-store-type: JKS

# Application specific configuration
app:
  # Feature flags configuration - Required by ConfigurationValidator
  features:
    enhanced-logging: ${ENHANCED_LOGGING:true}
    debug-mode: ${DEBUG_MODE:false}
    payload-caching: ${PAYLOAD_CACHING:true}
    circuit-breaker: ${CIRCUIT_BREAKER:true}
    retry-mechanism: ${RETRY_MECHANISM:true}
    hot-reload: ${HOT_RELOAD:false}
    metrics-collection: ${METRICS_COLLECTION:true}
    audit-logging: ${AUDIT_LOGGING:true}

  # Security configuration
  security:
    jwt:
      secret: ${JWT_SECRET:dev-secret-key-1234567890123456789012345678901234567890}
      expiration: ${JWT_EXPIRATION:3600000}
      issuer: ${JWT_ISSUER:interface-exception-collector}
      audience: ${JWT_AUDIENCE:biopro-services}
    rate-limit:
      enabled: ${RATE_LIMIT_ENABLED:true}
      requests-per-minute: ${RATE_LIMIT_RPM:60}
      burst-capacity: ${RATE_LIMIT_BURST:10}
    tls:
      enabled: ${TLS_ENABLED:false}
      keystore:
        path: ${TLS_KEYSTORE_PATH:}
        password: ${TLS_KEYSTORE_PASSWORD:}
      truststore:
        path: ${TLS_TRUSTSTORE_PATH:}
        password: ${TLS_TRUSTSTORE_PASSWORD:}
    audit:
      enabled: ${AUDIT_ENABLED:true}
      log-successful-requests: ${AUDIT_LOG_SUCCESS:false}
      log-failed-requests: ${AUDIT_LOG_FAILED:true}

  source-services:
    order:
      base-url: http://partner-order-service:8090
      api-key: ${ORDER_SERVICE_API_KEY:default-order-api-key}
      auth-header: X-API-Key
    collection:
      base-url: http://collection-service:8080
      api-key: ${COLLECTION_SERVICE_API_KEY:default-collection-api-key}
      auth-header: X-API-Key
    distribution:
      base-url: http://distribution-service:8080
      api-key: ${DISTRIBUTION_SERVICE_API_KEY:default-distribution-api-key}
      auth-header: X-API-Key
    timeout: 5000
    connection-timeout: 3000
    read-timeout: 5000
  
  # Database retry configuration
  database:
    retry:
      enabled: true
      max-attempts: 5
      initial-interval: 1000
      multiplier: 2.0
      max-interval: 30000
  
  # Kafka dead letter queue configuration
  kafka:
    dead-letter:
      enabled: true
      suffix: ".DLT"
      max-retries: 5
      retry-interval: 1000
    topics:
      order-rejected: "order.rejected"
      order-cancelled: "order.cancelled"
      collection-rejected: "collection.rejected"
      distribution-failed: "distribution.failed"
      validation-error: "validation.error"

  # Exception processing configuration
  exception:
    processing:
      batch-size: ${EXCEPTION_BATCH_SIZE:100}
      timeout: ${EXCEPTION_TIMEOUT:30000}
      max-concurrent: ${EXCEPTION_MAX_CONCURRENT:10}
    retry:
      max-attempts: ${EXCEPTION_RETRY_MAX_ATTEMPTS:5}
      backoff-delay: ${EXCEPTION_RETRY_BACKOFF:1000}
    alert:
      critical-threshold: ${EXCEPTION_ALERT_THRESHOLD:5}
      escalation-timeout: ${EXCEPTION_ALERT_ESCALATION:300}
    cleanup:
      enabled: ${EXCEPTION_CLEANUP_ENABLED:true}
      retention-days: ${EXCEPTION_RETENTION_DAYS:90}
      batch-size: ${EXCEPTION_CLEANUP_BATCH_SIZE:1000}

# Resilience4j configuration
resilience4j:
  circuitbreaker:
    instances:
      source-service:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 30s
        failure-rate-threshold: 50
        event-consumer-buffer-size: 10
        record-exceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.util.concurrent.TimeoutException
          - java.net.ConnectException
        ignore-exceptions:
          - org.springframework.web.client.HttpClientErrorException
  retry:
    instances:
      source-service:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - org.springframework.web.client.ResourceAccessException
          - java.net.ConnectException
        ignore-exceptions:
          - org.springframework.web.client.HttpClientErrorException
  timelimiter:
    instances:
      source-service:
        timeout-duration: 5s
        cancel-running-future: true

logging:
  level:
    com.arcone.biopro: DEBUG
    # JWT and Security specific logging - ENABLED FOR DEBUGGING
    com.arcone.biopro.exception.collector.api.security: DEBUG
    com.arcone.biopro.exception.collector.infrastructure.security: DEBUG
    com.arcone.biopro.exception.collector.api.security.jwt: DEBUG
    com.arcone.biopro.exception.collector.infrastructure.security.jwt: DEBUG
    # GraphQL specific logging levels
    com.arcone.biopro.exception.collector.api.graphql: INFO
    com.arcone.biopro.exception.collector.api.graphql.logging: INFO
    com.arcone.biopro.exception.collector.api.graphql.monitoring: INFO
    com.arcone.biopro.exception.collector.api.graphql.security: DEBUG
    # Spring Security - ENABLED FOR JWT DEBUGGING
    org.springframework.security: DEBUG
    org.springframework.security.web: DEBUG
    org.springframework.security.web.access: DEBUG
    org.springframework.security.access: DEBUG
    org.springframework.security.authentication: DEBUG
    org.springframework.security.oauth2: DEBUG
    org.springframework.security.jwt: DEBUG
    # JWT specific libraries
    io.jsonwebtoken: DEBUG
    # Spring GraphQL framework - enabled for debugging
    org.springframework.graphql: DEBUG
    org.springframework.boot.autoconfigure.graphql: DEBUG
    org.springframework.web.servlet.DispatcherServlet: DEBUG
    graphql.execution: INFO
    graphql.GraphQL: INFO
    # Other loggers
    org.flywaydb: INFO
    org.springframework.kafka: ERROR
    org.apache.kafka: ERROR
    io.github.resilience4j: DEBUG
    org.springframework.retry: DEBUG
    org.springframework.boot.actuator.health: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId:-}] [%X{transactionId:-}] [%X{interfaceType:-}] [%X{operationType:-}] [%X{operationName:-}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId:-}] [%X{transactionId:-}] [%X{interfaceType:-}] [%X{operationType:-}] [%X{operationName:-}] %logger{36} - %msg%n"


# Dynatrace Configuration
dynatrace:
  enabled: ${DYNATRACE_ENABLED:false}
  api-token: ${DYNATRACE_API_TOKEN:}
  uri: ${DYNATRACE_URI:}
  device-id: ${DYNATRACE_DEVICE_ID:interface-exception-collector}
  step: ${DYNATRACE_STEP:PT1M}
  connect-timeout: ${DYNATRACE_CONNECT_TIMEOUT:PT10S}
  read-timeout: ${DYNATRACE_READ_TIMEOUT:PT10S}
  
  # Business Metrics Configuration
  business-metrics:
    enabled: ${DYNATRACE_BUSINESS_METRICS_ENABLED:false}  # Disabled for local development
    exception-thresholds:
      critical-count: ${DYNATRACE_CRITICAL_THRESHOLD:10}
      pending-count: ${DYNATRACE_PENDING_THRESHOLD:100}
      retry-success-rate: ${DYNATRACE_RETRY_SUCCESS_THRESHOLD:70.0}
      processing-efficiency: ${DYNATRACE_PROCESSING_EFFICIENCY_THRESHOLD:80.0}
    
  # Custom Attributes Configuration
  custom-attributes:
    include-customer-id: ${DYNATRACE_INCLUDE_CUSTOMER_ID:true}
    include-location-code: ${DYNATRACE_INCLUDE_LOCATION_CODE:true}
    include-external-id: ${DYNATRACE_INCLUDE_EXTERNAL_ID:true}
    include-interface-type: ${DYNATRACE_INCLUDE_INTERFACE_TYPE:true}
    include-severity: ${DYNATRACE_INCLUDE_SEVERITY:true}

# OpenTelemetry Configuration for Dynatrace
otel:
  service:
    name: interface-exception-collector
    version: ${BUILD_VERSION:1.0.0-SNAPSHOT}
  resource:
    attributes:
      service.name: interface-exception-collector
      service.version: ${BUILD_VERSION:1.0.0-SNAPSHOT}
      service.namespace: biopro-interfaces
      deployment.environment: ${ENVIRONMENT:local}
  exporter:
    otlp:
      endpoint: ${OTEL_EXPORTER_OTLP_ENDPOINT:}
      headers: ${OTEL_EXPORTER_OTLP_HEADERS:}
  instrumentation:
    spring-boot:
      enabled: true
    kafka:
      enabled: true
    jdbc:
      enabled: true
    redis:
      enabled: false  # Redis completely disabled
    http-client:
      enabled: true

# Actuator configuration for health checks and metrics
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,loggers,graphql-health
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
    dynatrace:
      enabled: ${DYNATRACE_ENABLED:false}  # Disabled for local development
  health:
    circuitbreakers:
      enabled: true
    kafka:
      enabled: true
    redis:
      enabled: false  # Redis completely disabled
    graphql:
      enabled: true
    dynatrace:
      enabled: ${DYNATRACE_ENABLED:false}  # Disabled for local development
  metrics:
    export:
      prometheus:
        enabled: true
        step: 10s
        descriptions: true
      dynatrace:
        enabled: false  # Completely disable Dynatrace metrics export
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
        "[exception.processing.duration]": true
        "[retry.operation.duration]": true
        "[api.response.duration]": true
        "[database.operation.duration]": true
        "[external.service.call.duration]": true
        "[graphql.query.duration]": true
        "[graphql.mutation.duration]": true
        "[graphql.subscription.duration]": true
        "[graphql.field.fetch.duration]": true
      percentiles:
        "[http.server.requests]": 0.5, 0.95, 0.99
        "[exception.processing.duration]": 0.5, 0.95, 0.99
        "[retry.operation.duration]": 0.5, 0.95, 0.99
        "[api.response.duration]": 0.5, 0.95, 0.99
        "[database.operation.duration]": 0.5, 0.95, 0.99
        "[external.service.call.duration]": 0.5, 0.95, 0.99
        "[graphql.query.duration]": 0.5, 0.95, 0.99
        "[graphql.mutation.duration]": 0.5, 0.95, 0.99
        "[graphql.subscription.duration]": 0.5, 0.95, 0.99
        "[graphql.field.fetch.duration]": 0.5, 0.95, 0.99
    tags:
      application: interface-exception-collector-service
      environment: ${ENVIRONMENT:local}
      version: ${BUILD_VERSION:1.0.0-SNAPSHOT}
