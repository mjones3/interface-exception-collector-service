#!/usr/bin/env pwsh
# Test retry with generated JWT token

Write-Host "=== Testing Retry with Generated JWT Token ===" -ForegroundColor Green

# Use the token generated by the Node.js script
$token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXIiLCJyb2xlcyI6WyJBRE1JTiJdLCJpYXQiOjE3NTcwODk2NzcsImV4cCI6MTc1NzA5MzI3N30.yY7YuplEFh3HDfMR6tGejITSPgtJO-sfVRBXKj3Y9IY"

$headers = @{
    "Authorization" = "Bearer $token"
    "Content-Type" = "application/json"
}

Write-Host "Using JWT token: $($token.Substring(0, 50))..." -ForegroundColor Cyan

# Test the retry
$transactionId = "137ed65a-ce10-4cac-84d2-4e6e08bbed40"
$retryRequest = @{
    reason = "Testing retry with generated JWT - should route to PartnerOrderServiceClient for REST calls"
    initiatedBy = "test-user"
} | ConvertTo-Json

Write-Host "`nTesting retry for transaction: $transactionId" -ForegroundColor Yellow
Write-Host "Retry request:" -ForegroundColor Gray
Write-Host $retryRequest

try {
    $retryResponse = Invoke-RestMethod -Uri "http://localhost:8080/api/v1/exceptions/$transactionId/retry" -Method POST -Headers $headers -Body $retryRequest -TimeoutSec 30
    
    Write-Host "`nSUCCESS: Retry submitted!" -ForegroundColor Green
    Write-Host "Response:" -ForegroundColor Cyan
    Write-Host ($retryResponse | ConvertTo-Json -Depth 3)
    
} catch {
    Write-Host "`nERROR: $($_.Exception.Message)" -ForegroundColor Red
    if ($_.Exception.Response) {
        try {
            $reader = New-Object System.IO.StreamReader($_.Exception.Response.GetResponseStream())
            $responseBody = $reader.ReadToEnd()
            Write-Host "Response Body: $responseBody" -ForegroundColor Red
            Write-Host "Status Code: $($_.Exception.Response.StatusCode)" -ForegroundColor Red
        } catch {
            Write-Host "Could not read response body" -ForegroundColor Red
        }
    }
}

# Wait and check logs for client routing
Write-Host "`nWaiting for retry processing..." -ForegroundColor Yellow
Start-Sleep -Seconds 15

$podName = kubectl get pods -l app=interface-exception-collector -o jsonpath='{.items[0].metadata.name}' 2>$null
if ($podName -and $LASTEXITCODE -eq 0) {
    Write-Host "Checking logs in pod: $podName" -ForegroundColor Cyan
    $logs = kubectl logs $podName --tail=60 2>$null
    
    if ($logs) {
        Write-Host "`nRecent application logs:" -ForegroundColor Cyan
        $logs | Select-Object -Last 40 | ForEach-Object { 
            if ($_ -match "PartnerOrderServiceClient") {
                Write-Host "  $_" -ForegroundColor Green
            } elseif ($_ -match "MockRSocketOrderServiceClient") {
                Write-Host "  $_" -ForegroundColor Red
            } elseif ($_ -match "rsocket://") {
                Write-Host "  $_" -ForegroundColor Red
            } elseif ($_ -match "http://.*partner") {
                Write-Host "  $_" -ForegroundColor Green
            } elseif ($_ -match "supports.*interface") {
                Write-Host "  $_" -ForegroundColor Cyan
            } elseif ($_ -match "getClient.*ORDER") {
                Write-Host "  $_" -ForegroundColor Cyan
            } elseif ($_ -match "Found client.*for interface") {
                Write-Host "  $_" -ForegroundColor Cyan
            } elseif ($_ -match "JWT.*validation.*successful") {
                Write-Host "  $_" -ForegroundColor Green
            } elseif ($_ -match "JWT.*validation.*failed") {
                Write-Host "  $_" -ForegroundColor Red
            } elseif ($_ -match "retry.*submit") {
                Write-Host "  $_" -ForegroundColor Magenta
            } elseif ($_ -match "Submitting retry") {
                Write-Host "  $_" -ForegroundColor Magenta
            } elseif ($_ -match "Retry.*completed") {
                Write-Host "  $_" -ForegroundColor Magenta
            } else {
                Write-Host "  $_" -ForegroundColor Gray
            }
        }
        
        Write-Host "`nAnalysis:" -ForegroundColor Yellow
        if ($logs -match "PartnerOrderServiceClient") {
            Write-Host "✅ SUCCESS: PartnerOrderServiceClient is being used!" -ForegroundColor Green
        } elseif ($logs -match "MockRSocketOrderServiceClient") {
            Write-Host "❌ ISSUE: MockRSocketOrderServiceClient is still being used" -ForegroundColor Red
        } else {
            Write-Host "⚠️  No specific client usage found in recent logs" -ForegroundColor Yellow
        }
        
        if ($logs -match "rsocket://") {
            Write-Host "❌ ISSUE: RSocket URLs still being used" -ForegroundColor Red
        } else {
            Write-Host "✅ SUCCESS: No RSocket URLs in recent logs" -ForegroundColor Green
        }
        
        if ($logs -match "JWT.*validation.*successful") {
            Write-Host "✅ SUCCESS: JWT validation successful" -ForegroundColor Green
        } elseif ($logs -match "JWT.*validation.*failed") {
            Write-Host "❌ ISSUE: JWT validation failed" -ForegroundColor Red
        } else {
            Write-Host "⚠️  No JWT validation logs found" -ForegroundColor Yellow
        }
        
        if ($logs -match "Retry.*completed") {
            Write-Host "✅ SUCCESS: Retry operation completed" -ForegroundColor Green
        } else {
            Write-Host "⚠️  No retry completion logs found" -ForegroundColor Yellow
        }
    }
}

Write-Host "`n=== Generated JWT Retry Test Complete ===" -ForegroundColor Green