meta {
  name: Complex Filtering
  type: graphql
  seq: 1
}

post {
  url: {{graphql-endpoint}}
  body: graphql
  auth: bearer
}

auth:bearer {
  token: {{api-token}}
}

body:graphql {
query GetExceptionsAdvanced($filters: ExceptionFilters!, $pagination: PaginationInput!, $sorting: SortingInput!) {
  exceptions(filters: $filters, pagination: $pagination, sorting: $sorting) {
    edges {
      node {
        id
        transactionId
        externalId
        interfaceType
        exceptionReason
        operation
        status
        severity
        category
        customerId
        locationCode
        timestamp
        processedAt
        retryable
        retryCount
        maxRetries
        lastRetryAt
        acknowledgedBy
        acknowledgedAt
        retryHistory {
          id
          attemptNumber
          status
          initiatedBy
          initiatedAt
          resultSuccess
        }
      }
      cursor
    }
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
  }
}
}

body:graphql:vars {
{
  "filters": {
    "interfaceTypes": ["ORDER_COLLECTION", "PAYMENT_PROCESSING"],
    "statuses": ["NEW", "ACKNOWLEDGED", "IN_PROGRESS"],
    "severities": ["HIGH", "CRITICAL"],
    "categories": ["TIMEOUT_ERROR", "EXTERNAL_SERVICE_ERROR"],
    "dateRange": {
      "from": "2025-08-15T00:00:00Z",
      "to": "2025-08-20T23:59:59Z"
    },
    "customerIds": ["CUST-MOUNT-SINAI-001", "CUST-MAYO-CLINIC-002"],
    "locationCodes": ["HOSP-NYC-001", "HOSP-MN-001"],
    "searchTerm": "timeout",
    "excludeResolved": true,
    "retryable": true,
    "hasRetries": true
  },
  "pagination": {
    "first": 25,
    "after": null
  },
  "sorting": {
    "field": "severity",
    "direction": "DESC"
  }
}
}

docs {
  Advanced exception query with comprehensive filtering options.
}
